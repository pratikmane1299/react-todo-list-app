{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","this","props","todo","handleChange","handleSubmit","onSubmit","htmlFor","type","id","name","className","value","onChange","React","Component","TodoItem","toggleComplete","deleteTodo","checked","complete","onClick","TodoList","state","todos","filter","toggleAllComplete","e","setState","target","preventDefault","newTodo","length","map","t","deleteAllTodos","toggleCompleteAllTodos","filterTodos","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37335c6c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class TodoForm extends React.Component {\r\n  render() {\r\n    const { todo, handleChange, handleSubmit } = this.props;\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"todo\">Todo</label>\r\n        <input \r\n          type=\"text\" \r\n          id=\"todo\" \r\n          name=\"todo\" className=\"todo-input\" \r\n          value={todo} \r\n          onChange={handleChange} \r\n        />\r\n        <button className=\"add-todo-btn button-primary\">Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nconst TodoItem = (props) => {\r\n  const { todo, toggleComplete, deleteTodo } = props;\r\n  return (\r\n    <div className=\"todo\">\r\n      <input type=\"checkbox\" checked={todo.complete} onChange={toggleComplete} />\r\n      <span className={`${todo.complete ? 'complete' : ''}`}>{todo.todo}</span>\r\n      <span className=\"delete-todo-btn\" onClick={deleteTodo}>\r\n        <i className=\"far fa-trash-alt\"></i>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default class TodoList extends React.Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: 1,\r\n        todo: 'first todo',\r\n        complete: true\r\n      }\r\n    ],\r\n    todo: '',\r\n    filter: 'all',\r\n    toggleAllComplete: true\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      todo: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.todo === '') return;\r\n\r\n    const newTodo = {\r\n      id: this.state.todos.length + 1,\r\n      todo: this.state.todo,\r\n      complete: false\r\n    };\r\n    this.setState((state) => ({\r\n      todos: [newTodo, ...state.todos],\r\n    }));\r\n\r\n    this.setState({\r\n      todo: ''\r\n    });\r\n  }\r\n\r\n  toggleComplete = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map(t => {\r\n        if (t.id === id) {\r\n          return {\r\n            ...t,\r\n            complete: !t.complete\r\n          };\r\n        } else {\r\n          return t;\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  deleteTodo = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.filter(todo => todo.id !== id)\r\n    });\r\n  }\r\n\r\n  deleteAllTodos = () => {\r\n    this.setState({\r\n      todos: []\r\n    });\r\n  }\r\n\r\n  toggleCompleteAllTodos = () => {\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        return {\r\n          ...todo,\r\n          complete: this.state.toggleAllComplete\r\n        }\r\n      }),\r\n      toggleAllComplete: !this.state.toggleAllComplete\r\n    });\r\n  }\r\n\r\n  filterTodos = (filter) => {\r\n    this.setState({\r\n      filter: filter\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let todos = [];\r\n\r\n    switch (this.state.filter) {\r\n      case 'active':\r\n        todos = this.state.todos.filter(todo => !todo.complete);\r\n        break;\r\n      case 'complete':\r\n        todos = this.state.todos.filter(todo => todo.complete);\r\n        break;\r\n      default:\r\n        todos = this.state.todos;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <TodoForm\r\n          todo={this.state.todo}\r\n          handleChange={this.handleChange}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n        <div className=\"buttons-wrapper\">\r\n          <button onClick={this.deleteAllTodos}>Delete all todos</button>\r\n          <button onClick={this.toggleCompleteAllTodos}>Toggle all todos as complete</button>\r\n        </div>\r\n        <div className=\"filter-btn-wrapper\">\r\n          <span className={`${this.state.filter === 'all' ? 'active-filter' : null}`} onClick={() => this.filterTodos('all')}>All</span>\r\n          <span className={`${this.state.filter === 'active' ? 'active-filter' : null}`} onClick={() => this.filterTodos('active')}>Active</span>\r\n          <span className={`${this.state.filter === 'complete' ? 'active-filter' : null}`} onClick={() => this.filterTodos('complete')}>Complete</span>\r\n        </div>\r\n        <p className=\"todos-count\">Todos - {todos.length}</p>\r\n        {\r\n          todos.map(todo => (\r\n            <TodoItem\r\n              key={todo.id}\r\n              todo={todo}\r\n              toggleComplete={() => this.toggleComplete(todo.id)}\r\n              deleteTodo={() => this.deleteTodo(todo.id)}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport './App.css';\n\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Todo List</h1>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}